// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AssertTypeAdded extends ethereum.Event {
  get params(): AssertTypeAdded__Params {
    return new AssertTypeAdded__Params(this);
  }
}

export class AssertTypeAdded__Params {
  _event: AssertTypeAdded;

  constructor(event: AssertTypeAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assertType(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class AssertTypeClear extends ethereum.Event {
  get params(): AssertTypeClear__Params {
    return new AssertTypeClear__Params(this);
  }
}

export class AssertTypeClear__Params {
  _event: AssertTypeClear;

  constructor(event: AssertTypeClear) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class AssertTypeUpdated extends ethereum.Event {
  get params(): AssertTypeUpdated__Params {
    return new AssertTypeUpdated__Params(this);
  }
}

export class AssertTypeUpdated__Params {
  _event: AssertTypeUpdated;

  constructor(event: AssertTypeUpdated) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assertType(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RechargeSuccess extends ethereum.Event {
  get params(): RechargeSuccess__Params {
    return new RechargeSuccess__Params(this);
  }
}

export class RechargeSuccess__Params {
  _event: RechargeSuccess;

  constructor(event: RechargeSuccess) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class WithdrawSuccess extends ethereum.Event {
  get params(): WithdrawSuccess__Params {
    return new WithdrawSuccess__Params(this);
  }
}

export class WithdrawSuccess__Params {
  _event: WithdrawSuccess;

  constructor(event: WithdrawSuccess) {
    this._event = event;
  }

  get nonce(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class FundChannelUpgrades__assertsResult {
  value0: Address;
  value1: string;
  value2: Address;
  value3: BigInt;

  constructor(
    value0: Address,
    value1: string,
    value2: Address,
    value3: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getContractAddress(): Address {
    return this.value0;
  }

  getAssertType(): string {
    return this.value1;
  }

  getRecipientAddress(): Address {
    return this.value2;
  }

  getTokenId(): BigInt {
    return this.value3;
  }
}

export class FundChannelUpgrades__getAssertTypeResultResultStruct extends ethereum.Tuple {
  get contractAddress(): Address {
    return this[0].toAddress();
  }

  get assertType(): string {
    return this[1].toString();
  }

  get recipientAddress(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }
}

export class FundChannelUpgrades extends ethereum.SmartContract {
  static bind(address: Address): FundChannelUpgrades {
    return new FundChannelUpgrades("FundChannelUpgrades", address);
  }

  ERC1155_TYPE(): Bytes {
    let result = super.call("ERC1155_TYPE", "ERC1155_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ERC1155_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ERC1155_TYPE", "ERC1155_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC20_TYPE(): Bytes {
    let result = super.call("ERC20_TYPE", "ERC20_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ERC20_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ERC20_TYPE", "ERC20_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ERC721_TYPE(): Bytes {
    let result = super.call("ERC721_TYPE", "ERC721_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ERC721_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ERC721_TYPE", "ERC721_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  asserts(param0: BigInt): FundChannelUpgrades__assertsResult {
    let result = super.call(
      "asserts",
      "asserts(uint256):(address,string,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new FundChannelUpgrades__assertsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toAddress(),
      result[3].toBigInt()
    );
  }

  try_asserts(
    param0: BigInt
  ): ethereum.CallResult<FundChannelUpgrades__assertsResult> {
    let result = super.tryCall(
      "asserts",
      "asserts(uint256):(address,string,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new FundChannelUpgrades__assertsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toAddress(),
        value[3].toBigInt()
      )
    );
  }

  getAssertType(
    id: BigInt
  ): FundChannelUpgrades__getAssertTypeResultResultStruct {
    let result = super.call(
      "getAssertType",
      "getAssertType(uint256):((address,string,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<FundChannelUpgrades__getAssertTypeResultResultStruct>(
      result[0].toTuple()
    );
  }

  try_getAssertType(
    id: BigInt
  ): ethereum.CallResult<FundChannelUpgrades__getAssertTypeResultResultStruct> {
    let result = super.tryCall(
      "getAssertType",
      "getAssertType(uint256):((address,string,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<FundChannelUpgrades__getAssertTypeResultResultStruct>(
        value[0].toTuple()
      )
    );
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usedNonces(param0: BigInt): boolean {
    let result = super.call("usedNonces", "usedNonces(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_usedNonces(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("usedNonces", "usedNonces(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddAssertTypeCall extends ethereum.Call {
  get inputs(): AddAssertTypeCall__Inputs {
    return new AddAssertTypeCall__Inputs(this);
  }

  get outputs(): AddAssertTypeCall__Outputs {
    return new AddAssertTypeCall__Outputs(this);
  }
}

export class AddAssertTypeCall__Inputs {
  _call: AddAssertTypeCall;

  constructor(call: AddAssertTypeCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assertType(): string {
    return this._call.inputValues[2].value.toString();
  }

  get recipientAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class AddAssertTypeCall__Outputs {
  _call: AddAssertTypeCall;

  constructor(call: AddAssertTypeCall) {
    this._call = call;
  }
}

export class ClearAssertTypeCall extends ethereum.Call {
  get inputs(): ClearAssertTypeCall__Inputs {
    return new ClearAssertTypeCall__Inputs(this);
  }

  get outputs(): ClearAssertTypeCall__Outputs {
    return new ClearAssertTypeCall__Outputs(this);
  }
}

export class ClearAssertTypeCall__Inputs {
  _call: ClearAssertTypeCall;

  constructor(call: ClearAssertTypeCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ClearAssertTypeCall__Outputs {
  _call: ClearAssertTypeCall;

  constructor(call: ClearAssertTypeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ManageContractCall extends ethereum.Call {
  get inputs(): ManageContractCall__Inputs {
    return new ManageContractCall__Inputs(this);
  }

  get outputs(): ManageContractCall__Outputs {
    return new ManageContractCall__Outputs(this);
  }
}

export class ManageContractCall__Inputs {
  _call: ManageContractCall;

  constructor(call: ManageContractCall) {
    this._call = call;
  }

  get _contract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ManageContractCall__Outputs {
  _call: ManageContractCall;

  constructor(call: ManageContractCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RechargeCall extends ethereum.Call {
  get inputs(): RechargeCall__Inputs {
    return new RechargeCall__Inputs(this);
  }

  get outputs(): RechargeCall__Outputs {
    return new RechargeCall__Outputs(this);
  }
}

export class RechargeCall__Inputs {
  _call: RechargeCall;

  constructor(call: RechargeCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assertId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RechargeCall__Outputs {
  _call: RechargeCall;

  constructor(call: RechargeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAssertTypeCall extends ethereum.Call {
  get inputs(): UpdateAssertTypeCall__Inputs {
    return new UpdateAssertTypeCall__Inputs(this);
  }

  get outputs(): UpdateAssertTypeCall__Outputs {
    return new UpdateAssertTypeCall__Outputs(this);
  }
}

export class UpdateAssertTypeCall__Inputs {
  _call: UpdateAssertTypeCall;

  constructor(call: UpdateAssertTypeCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assertType(): string {
    return this._call.inputValues[2].value.toString();
  }

  get recipientAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateAssertTypeCall__Outputs {
  _call: UpdateAssertTypeCall;

  constructor(call: UpdateAssertTypeCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get nonce(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get assertId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get tokenURI(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
