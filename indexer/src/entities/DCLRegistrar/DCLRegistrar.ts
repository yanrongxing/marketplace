// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseURI extends ethereum.Event {
  get params(): BaseURI__Params {
    return new BaseURI__Params(this);
  }
}

export class BaseURI__Params {
  _event: BaseURI;

  constructor(event: BaseURI) {
    this._event = event;
  }

  get _oldBaseURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get _newBaseURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class BaseUpdated extends ethereum.Event {
  get params(): BaseUpdated__Params {
    return new BaseUpdated__Params(this);
  }
}

export class BaseUpdated__Params {
  _event: BaseUpdated;

  constructor(event: BaseUpdated) {
    this._event = event;
  }

  get _previousBase(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newBase(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class CallForwarwedToResolver extends ethereum.Event {
  get params(): CallForwarwedToResolver__Params {
    return new CallForwarwedToResolver__Params(this);
  }
}

export class CallForwarwedToResolver__Params {
  _event: CallForwarwedToResolver;

  constructor(event: CallForwarwedToResolver) {
    this._event = event;
  }

  get _resolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _data(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get res(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class ControllerAdded extends ethereum.Event {
  get params(): ControllerAdded__Params {
    return new ControllerAdded__Params(this);
  }
}

export class ControllerAdded__Params {
  _event: ControllerAdded;

  constructor(event: ControllerAdded) {
    this._event = event;
  }

  get _controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ControllerRemoved extends ethereum.Event {
  get params(): ControllerRemoved__Params {
    return new ControllerRemoved__Params(this);
  }
}

export class ControllerRemoved__Params {
  _event: ControllerRemoved;

  constructor(event: ControllerRemoved) {
    this._event = event;
  }

  get _controller(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DomainReclaimed extends ethereum.Event {
  get params(): DomainReclaimed__Params {
    return new DomainReclaimed__Params(this);
  }
}

export class DomainReclaimed__Params {
  _event: DomainReclaimed;

  constructor(event: DomainReclaimed) {
    this._event = event;
  }

  get _tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class DomainTransferred extends ethereum.Event {
  get params(): DomainTransferred__Params {
    return new DomainTransferred__Params(this);
  }
}

export class DomainTransferred__Params {
  _event: DomainTransferred;

  constructor(event: DomainTransferred) {
    this._event = event;
  }

  get _newOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MigrationFinished extends ethereum.Event {
  get params(): MigrationFinished__Params {
    return new MigrationFinished__Params(this);
  }
}

export class MigrationFinished__Params {
  _event: MigrationFinished;

  constructor(event: MigrationFinished) {
    this._event = event;
  }
}

export class NameRegistered extends ethereum.Event {
  get params(): NameRegistered__Params {
    return new NameRegistered__Params(this);
  }
}

export class NameRegistered__Params {
  _event: NameRegistered;

  constructor(event: NameRegistered) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _beneficiary(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _labelHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get _subdomain(): string {
    return this._event.parameters[3].value.toString();
  }

  get _createdDate(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Reclaimed extends ethereum.Event {
  get params(): Reclaimed__Params {
    return new Reclaimed__Params(this);
  }
}

export class Reclaimed__Params {
  _event: Reclaimed;

  constructor(event: Reclaimed) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RegistryUpdated extends ethereum.Event {
  get params(): RegistryUpdated__Params {
    return new RegistryUpdated__Params(this);
  }
}

export class RegistryUpdated__Params {
  _event: RegistryUpdated;

  constructor(event: RegistryUpdated) {
    this._event = event;
  }

  get _previousRegistry(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newRegistry(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ResolverUpdated extends ethereum.Event {
  get params(): ResolverUpdated__Params {
    return new ResolverUpdated__Params(this);
  }
}

export class ResolverUpdated__Params {
  _event: ResolverUpdated;

  constructor(event: ResolverUpdated) {
    this._event = event;
  }

  get _oldResolver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newResolver(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DCLRegistrar extends ethereum.SmartContract {
  static bind(address: Address): DCLRegistrar {
    return new DCLRegistrar("DCLRegistrar", address);
  }

  ERC721_RECEIVED(): Bytes {
    let result = super.call(
      "ERC721_RECEIVED",
      "ERC721_RECEIVED():(bytes4)",
      []
    );

    return result[0].toBytes();
  }

  try_ERC721_RECEIVED(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ERC721_RECEIVED",
      "ERC721_RECEIVED():(bytes4)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  available(_subdomain: string): boolean {
    let result = super.call("available", "available(string):(bool)", [
      ethereum.Value.fromString(_subdomain)
    ]);

    return result[0].toBoolean();
  }

  try_available(_subdomain: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("available", "available(string):(bool)", [
      ethereum.Value.fromString(_subdomain)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  base(): Address {
    let result = super.call("base", "base():(address)", []);

    return result[0].toAddress();
  }

  try_base(): ethereum.CallResult<Address> {
    let result = super.tryCall("base", "base():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  controllers(param0: Address): boolean {
    let result = super.call("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_controllers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("controllers", "controllers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  domain(): string {
    let result = super.call("domain", "domain():(string)", []);

    return result[0].toString();
  }

  try_domain(): ethereum.CallResult<string> {
    let result = super.tryCall("domain", "domain():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domainNameHash(): Bytes {
    let result = super.call("domainNameHash", "domainNameHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_domainNameHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainNameHash",
      "domainNameHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOwnerOf(_subdomain: string): Address {
    let result = super.call("getOwnerOf", "getOwnerOf(string):(address)", [
      ethereum.Value.fromString(_subdomain)
    ]);

    return result[0].toAddress();
  }

  try_getOwnerOf(_subdomain: string): ethereum.CallResult<Address> {
    let result = super.tryCall("getOwnerOf", "getOwnerOf(string):(address)", [
      ethereum.Value.fromString(_subdomain)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenId(_subdomain: string): BigInt {
    let result = super.call("getTokenId", "getTokenId(string):(uint256)", [
      ethereum.Value.fromString(_subdomain)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenId(_subdomain: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTokenId", "getTokenId(string):(uint256)", [
      ethereum.Value.fromString(_subdomain)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  migrated(): boolean {
    let result = super.call("migrated", "migrated():(bool)", []);

    return result[0].toBoolean();
  }

  try_migrated(): ethereum.CallResult<boolean> {
    let result = super.tryCall("migrated", "migrated():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    _tokenId: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    _tokenId: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subdomains(param0: Bytes): string {
    let result = super.call("subdomains", "subdomains(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toString();
  }

  try_subdomains(param0: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall("subdomains", "subdomains(bytes32):(string)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  topdomain(): string {
    let result = super.call("topdomain", "topdomain():(string)", []);

    return result[0].toString();
  }

  try_topdomain(): ethereum.CallResult<string> {
    let result = super.tryCall("topdomain", "topdomain():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  topdomainNameHash(): Bytes {
    let result = super.call(
      "topdomainNameHash",
      "topdomainNameHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_topdomainNameHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "topdomainNameHash",
      "topdomainNameHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _base(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _topdomain(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _domain(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _baseURI(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddControllerCall extends ethereum.Call {
  get inputs(): AddControllerCall__Inputs {
    return new AddControllerCall__Inputs(this);
  }

  get outputs(): AddControllerCall__Outputs {
    return new AddControllerCall__Outputs(this);
  }
}

export class AddControllerCall__Inputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddControllerCall__Outputs {
  _call: AddControllerCall;

  constructor(call: AddControllerCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ForwardToResolverCall extends ethereum.Call {
  get inputs(): ForwardToResolverCall__Inputs {
    return new ForwardToResolverCall__Inputs(this);
  }

  get outputs(): ForwardToResolverCall__Outputs {
    return new ForwardToResolverCall__Outputs(this);
  }
}

export class ForwardToResolverCall__Inputs {
  _call: ForwardToResolverCall;

  constructor(call: ForwardToResolverCall) {
    this._call = call;
  }

  get _data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ForwardToResolverCall__Outputs {
  _call: ForwardToResolverCall;

  constructor(call: ForwardToResolverCall) {
    this._call = call;
  }
}

export class MigrateNamesCall extends ethereum.Call {
  get inputs(): MigrateNamesCall__Inputs {
    return new MigrateNamesCall__Inputs(this);
  }

  get outputs(): MigrateNamesCall__Outputs {
    return new MigrateNamesCall__Outputs(this);
  }
}

export class MigrateNamesCall__Inputs {
  _call: MigrateNamesCall;

  constructor(call: MigrateNamesCall) {
    this._call = call;
  }

  get _names(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }

  get _beneficiaries(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _createdDates(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MigrateNamesCall__Outputs {
  _call: MigrateNamesCall;

  constructor(call: MigrateNamesCall) {
    this._call = call;
  }
}

export class MigrationFinishedCall extends ethereum.Call {
  get inputs(): MigrationFinishedCall__Inputs {
    return new MigrationFinishedCall__Inputs(this);
  }

  get outputs(): MigrationFinishedCall__Outputs {
    return new MigrationFinishedCall__Outputs(this);
  }
}

export class MigrationFinishedCall__Inputs {
  _call: MigrationFinishedCall;

  constructor(call: MigrationFinishedCall) {
    this._call = call;
  }
}

export class MigrationFinishedCall__Outputs {
  _call: MigrationFinishedCall;

  constructor(call: MigrationFinishedCall) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ReclaimCall extends ethereum.Call {
  get inputs(): ReclaimCall__Inputs {
    return new ReclaimCall__Inputs(this);
  }

  get outputs(): ReclaimCall__Outputs {
    return new ReclaimCall__Outputs(this);
  }
}

export class ReclaimCall__Inputs {
  _call: ReclaimCall;

  constructor(call: ReclaimCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ReclaimCall__Outputs {
  _call: ReclaimCall;

  constructor(call: ReclaimCall) {
    this._call = call;
  }
}

export class Reclaim1Call extends ethereum.Call {
  get inputs(): Reclaim1Call__Inputs {
    return new Reclaim1Call__Inputs(this);
  }

  get outputs(): Reclaim1Call__Outputs {
    return new Reclaim1Call__Outputs(this);
  }
}

export class Reclaim1Call__Inputs {
  _call: Reclaim1Call;

  constructor(call: Reclaim1Call) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class Reclaim1Call__Outputs {
  _call: Reclaim1Call;

  constructor(call: Reclaim1Call) {
    this._call = call;
  }
}

export class ReclaimDomainCall extends ethereum.Call {
  get inputs(): ReclaimDomainCall__Inputs {
    return new ReclaimDomainCall__Inputs(this);
  }

  get outputs(): ReclaimDomainCall__Outputs {
    return new ReclaimDomainCall__Outputs(this);
  }
}

export class ReclaimDomainCall__Inputs {
  _call: ReclaimDomainCall;

  constructor(call: ReclaimDomainCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReclaimDomainCall__Outputs {
  _call: ReclaimDomainCall;

  constructor(call: ReclaimDomainCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get _subdomain(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _beneficiary(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }
}

export class RemoveControllerCall extends ethereum.Call {
  get inputs(): RemoveControllerCall__Inputs {
    return new RemoveControllerCall__Inputs(this);
  }

  get outputs(): RemoveControllerCall__Outputs {
    return new RemoveControllerCall__Outputs(this);
  }
}

export class RemoveControllerCall__Inputs {
  _call: RemoveControllerCall;

  constructor(call: RemoveControllerCall) {
    this._call = call;
  }

  get controller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveControllerCall__Outputs {
  _call: RemoveControllerCall;

  constructor(call: RemoveControllerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetResolverCall extends ethereum.Call {
  get inputs(): SetResolverCall__Inputs {
    return new SetResolverCall__Inputs(this);
  }

  get outputs(): SetResolverCall__Outputs {
    return new SetResolverCall__Outputs(this);
  }
}

export class SetResolverCall__Inputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }

  get _resolver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetResolverCall__Outputs {
  _call: SetResolverCall;

  constructor(call: SetResolverCall) {
    this._call = call;
  }
}

export class TransferDomainOwnershipCall extends ethereum.Call {
  get inputs(): TransferDomainOwnershipCall__Inputs {
    return new TransferDomainOwnershipCall__Inputs(this);
  }

  get outputs(): TransferDomainOwnershipCall__Outputs {
    return new TransferDomainOwnershipCall__Outputs(this);
  }
}

export class TransferDomainOwnershipCall__Inputs {
  _call: TransferDomainOwnershipCall;

  constructor(call: TransferDomainOwnershipCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferDomainOwnershipCall__Outputs {
  _call: TransferDomainOwnershipCall;

  constructor(call: TransferDomainOwnershipCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBaseCall extends ethereum.Call {
  get inputs(): UpdateBaseCall__Inputs {
    return new UpdateBaseCall__Inputs(this);
  }

  get outputs(): UpdateBaseCall__Outputs {
    return new UpdateBaseCall__Outputs(this);
  }
}

export class UpdateBaseCall__Inputs {
  _call: UpdateBaseCall;

  constructor(call: UpdateBaseCall) {
    this._call = call;
  }

  get _base(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateBaseCall__Outputs {
  _call: UpdateBaseCall;

  constructor(call: UpdateBaseCall) {
    this._call = call;
  }
}

export class UpdateBaseURICall extends ethereum.Call {
  get inputs(): UpdateBaseURICall__Inputs {
    return new UpdateBaseURICall__Inputs(this);
  }

  get outputs(): UpdateBaseURICall__Outputs {
    return new UpdateBaseURICall__Outputs(this);
  }
}

export class UpdateBaseURICall__Inputs {
  _call: UpdateBaseURICall;

  constructor(call: UpdateBaseURICall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateBaseURICall__Outputs {
  _call: UpdateBaseURICall;

  constructor(call: UpdateBaseURICall) {
    this._call = call;
  }
}

export class UpdateRegistryCall extends ethereum.Call {
  get inputs(): UpdateRegistryCall__Inputs {
    return new UpdateRegistryCall__Inputs(this);
  }

  get outputs(): UpdateRegistryCall__Outputs {
    return new UpdateRegistryCall__Outputs(this);
  }
}

export class UpdateRegistryCall__Inputs {
  _call: UpdateRegistryCall;

  constructor(call: UpdateRegistryCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateRegistryCall__Outputs {
  _call: UpdateRegistryCall;

  constructor(call: UpdateRegistryCall) {
    this._call = call;
  }
}
