// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class EstateRegistrySet extends ethereum.Event {
  get params(): EstateRegistrySet__Params {
    return new EstateRegistrySet__Params(this);
  }
}

export class EstateRegistrySet__Params {
  _event: EstateRegistrySet;

  constructor(event: EstateRegistrySet) {
    this._event = event;
  }

  get registry(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Update extends ethereum.Event {
  get params(): Update__Params {
    return new Update__Params(this);
  }
}

export class Update__Params {
  _event: Update;

  constructor(event: Update) {
    this._event = event;
  }

  get assetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get holder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get data(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class UpdateOperator extends ethereum.Event {
  get params(): UpdateOperator__Params {
    return new UpdateOperator__Params(this);
  }
}

export class UpdateOperator__Params {
  _event: UpdateOperator;

  constructor(event: UpdateOperator) {
    this._event = event;
  }

  get assetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateManager extends ethereum.Event {
  get params(): UpdateManager__Params {
    return new UpdateManager__Params(this);
  }
}

export class UpdateManager__Params {
  _event: UpdateManager;

  constructor(event: UpdateManager) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class DeployAuthorized extends ethereum.Event {
  get params(): DeployAuthorized__Params {
    return new DeployAuthorized__Params(this);
  }
}

export class DeployAuthorized__Params {
  _event: DeployAuthorized;

  constructor(event: DeployAuthorized) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _deployer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DeployForbidden extends ethereum.Event {
  get params(): DeployForbidden__Params {
    return new DeployForbidden__Params(this);
  }
}

export class DeployForbidden__Params {
  _event: DeployForbidden;

  constructor(event: DeployForbidden) {
    this._event = event;
  }

  get _caller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _deployer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get userData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get operatorData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }
}

export class Transfer1 extends ethereum.Event {
  get params(): Transfer1__Params {
    return new Transfer1__Params(this);
  }
}

export class Transfer1__Params {
  _event: Transfer1;

  constructor(event: Transfer1) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get userData(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }
}

export class Transfer2 extends ethereum.Event {
  get params(): Transfer2__Params {
    return new Transfer2__Params(this);
  }
}

export class Transfer2__Params {
  _event: Transfer2;

  constructor(event: Transfer2) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get authorized(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnerUpdate extends ethereum.Event {
  get params(): OwnerUpdate__Params {
    return new OwnerUpdate__Params(this);
  }
}

export class OwnerUpdate__Params {
  _event: OwnerUpdate;

  constructor(event: OwnerUpdate) {
    this._event = event;
  }

  get _prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LANDRegistry__decodeTokenIdResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class LANDRegistry__landOfResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<BigInt> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class LANDRegistry extends ethereum.SmartContract {
  static bind(address: Address): LANDRegistry {
    return new LANDRegistry("LANDRegistry", address);
  }

  supportsInterface(_interfaceID: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceID)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceID: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceID)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxyOwner(): Address {
    let result = super.call("proxyOwner", "proxyOwner():(address)", []);

    return result[0].toAddress();
  }

  try_proxyOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("proxyOwner", "proxyOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateManager(param0: Address, param1: Address): boolean {
    let result = super.call(
      "updateManager",
      "updateManager(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_updateManager(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateManager",
      "updateManager(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(assetId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(assetId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestPing(param0: Address): BigInt {
    let result = super.call("latestPing", "latestPing(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_latestPing(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("latestPing", "latestPing(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isAuthorized(operator: Address, assetId: BigInt): boolean {
    let result = super.call(
      "isAuthorized",
      "isAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isAuthorized(
    operator: Address,
    assetId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isAuthorized",
      "isAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  authorizedDeploy(param0: Address): boolean {
    let result = super.call(
      "authorizedDeploy",
      "authorizedDeploy(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_authorizedDeploy(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizedDeploy",
      "authorizedDeploy(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensOf(owner: Address): Array<BigInt> {
    let result = super.call("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigIntArray();
  }

  try_tokensOf(owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  ownerOf(assetId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(assetId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GET_METADATA(): Bytes {
    let result = super.call("GET_METADATA", "GET_METADATA():(bytes4)", []);

    return result[0].toBytes();
  }

  try_GET_METADATA(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("GET_METADATA", "GET_METADATA():(bytes4)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentContract(): Address {
    let result = super.call(
      "currentContract",
      "currentContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_currentContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "currentContract",
      "currentContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateOperator(param0: BigInt): Address {
    let result = super.call(
      "updateOperator",
      "updateOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_updateOperator(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "updateOperator",
      "updateOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  estateRegistry(): Address {
    let result = super.call("estateRegistry", "estateRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_estateRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "estateRegistry",
      "estateRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(assetHolder: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(assetHolder),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    assetHolder: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(assetHolder),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApprovedAddress(assetId: BigInt): Address {
    let result = super.call(
      "getApprovedAddress",
      "getApprovedAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );

    return result[0].toAddress();
  }

  try_getApprovedAddress(assetId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApprovedAddress",
      "getApprovedAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isUpdateAuthorized(operator: Address, assetId: BigInt): boolean {
    let result = super.call(
      "isUpdateAuthorized",
      "isUpdateAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isUpdateAuthorized(
    operator: Address,
    assetId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUpdateAuthorized",
      "isUpdateAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(assetId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  encodeTokenId(x: BigInt, y: BigInt): BigInt {
    let result = super.call(
      "encodeTokenId",
      "encodeTokenId(int256,int256):(uint256)",
      [ethereum.Value.fromSignedBigInt(x), ethereum.Value.fromSignedBigInt(y)]
    );

    return result[0].toBigInt();
  }

  try_encodeTokenId(x: BigInt, y: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "encodeTokenId",
      "encodeTokenId(int256,int256):(uint256)",
      [ethereum.Value.fromSignedBigInt(x), ethereum.Value.fromSignedBigInt(y)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decodeTokenId(value: BigInt): LANDRegistry__decodeTokenIdResult {
    let result = super.call(
      "decodeTokenId",
      "decodeTokenId(uint256):(int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(value)]
    );

    return new LANDRegistry__decodeTokenIdResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_decodeTokenId(
    value: BigInt
  ): ethereum.CallResult<LANDRegistry__decodeTokenIdResult> {
    let result = super.tryCall(
      "decodeTokenId",
      "decodeTokenId(uint256):(int256,int256)",
      [ethereum.Value.fromUnsignedBigInt(value)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LANDRegistry__decodeTokenIdResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  exists(x: BigInt, y: BigInt): boolean {
    let result = super.call("exists", "exists(int256,int256):(bool)", [
      ethereum.Value.fromSignedBigInt(x),
      ethereum.Value.fromSignedBigInt(y)
    ]);

    return result[0].toBoolean();
  }

  try_exists(x: BigInt, y: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(int256,int256):(bool)", [
      ethereum.Value.fromSignedBigInt(x),
      ethereum.Value.fromSignedBigInt(y)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  exists1(assetId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);

    return result[0].toBoolean();
  }

  try_exists1(assetId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(assetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  ownerOfLand(x: BigInt, y: BigInt): Address {
    let result = super.call(
      "ownerOfLand",
      "ownerOfLand(int256,int256):(address)",
      [ethereum.Value.fromSignedBigInt(x), ethereum.Value.fromSignedBigInt(y)]
    );

    return result[0].toAddress();
  }

  try_ownerOfLand(x: BigInt, y: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ownerOfLand",
      "ownerOfLand(int256,int256):(address)",
      [ethereum.Value.fromSignedBigInt(x), ethereum.Value.fromSignedBigInt(y)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOfLandMany(x: Array<BigInt>, y: Array<BigInt>): Array<Address> {
    let result = super.call(
      "ownerOfLandMany",
      "ownerOfLandMany(int256[],int256[]):(address[])",
      [
        ethereum.Value.fromSignedBigIntArray(x),
        ethereum.Value.fromSignedBigIntArray(y)
      ]
    );

    return result[0].toAddressArray();
  }

  try_ownerOfLandMany(
    x: Array<BigInt>,
    y: Array<BigInt>
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "ownerOfLandMany",
      "ownerOfLandMany(int256[],int256[]):(address[])",
      [
        ethereum.Value.fromSignedBigIntArray(x),
        ethereum.Value.fromSignedBigIntArray(y)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  landOf(owner: Address): LANDRegistry__landOfResult {
    let result = super.call("landOf", "landOf(address):(int256[],int256[])", [
      ethereum.Value.fromAddress(owner)
    ]);

    return new LANDRegistry__landOfResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_landOf(owner: Address): ethereum.CallResult<LANDRegistry__landOfResult> {
    let result = super.tryCall(
      "landOf",
      "landOf(address):(int256[],int256[])",
      [ethereum.Value.fromAddress(owner)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LANDRegistry__landOfResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  tokenMetadata(assetId: BigInt): string {
    let result = super.call(
      "tokenMetadata",
      "tokenMetadata(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );

    return result[0].toString();
  }

  try_tokenMetadata(assetId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "tokenMetadata",
      "tokenMetadata(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(assetId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  landData(x: BigInt, y: BigInt): string {
    let result = super.call("landData", "landData(int256,int256):(string)", [
      ethereum.Value.fromSignedBigInt(x),
      ethereum.Value.fromSignedBigInt(y)
    ]);

    return result[0].toString();
  }

  try_landData(x: BigInt, y: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("landData", "landData(int256,int256):(string)", [
      ethereum.Value.fromSignedBigInt(x),
      ethereum.Value.fromSignedBigInt(y)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createEstate(
    x: Array<BigInt>,
    y: Array<BigInt>,
    beneficiary: Address
  ): BigInt {
    let result = super.call(
      "createEstate",
      "createEstate(int256[],int256[],address):(uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(x),
        ethereum.Value.fromSignedBigIntArray(y),
        ethereum.Value.fromAddress(beneficiary)
      ]
    );

    return result[0].toBigInt();
  }

  try_createEstate(
    x: Array<BigInt>,
    y: Array<BigInt>,
    beneficiary: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createEstate",
      "createEstate(int256[],int256[],address):(uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(x),
        ethereum.Value.fromSignedBigIntArray(y),
        ethereum.Value.fromAddress(beneficiary)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createEstateWithMetadata(
    x: Array<BigInt>,
    y: Array<BigInt>,
    beneficiary: Address,
    metadata: string
  ): BigInt {
    let result = super.call(
      "createEstateWithMetadata",
      "createEstateWithMetadata(int256[],int256[],address,string):(uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(x),
        ethereum.Value.fromSignedBigIntArray(y),
        ethereum.Value.fromAddress(beneficiary),
        ethereum.Value.fromString(metadata)
      ]
    );

    return result[0].toBigInt();
  }

  try_createEstateWithMetadata(
    x: Array<BigInt>,
    y: Array<BigInt>,
    beneficiary: Address,
    metadata: string
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createEstateWithMetadata",
      "createEstateWithMetadata(int256[],int256[],address,string):(uint256)",
      [
        ethereum.Value.fromSignedBigIntArray(x),
        ethereum.Value.fromSignedBigIntArray(y),
        ethereum.Value.fromAddress(beneficiary),
        ethereum.Value.fromString(metadata)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get authorized(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get userData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class AuthorizeDeployCall extends ethereum.Call {
  get inputs(): AuthorizeDeployCall__Inputs {
    return new AuthorizeDeployCall__Inputs(this);
  }

  get outputs(): AuthorizeDeployCall__Outputs {
    return new AuthorizeDeployCall__Outputs(this);
  }
}

export class AuthorizeDeployCall__Inputs {
  _call: AuthorizeDeployCall;

  constructor(call: AuthorizeDeployCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AuthorizeDeployCall__Outputs {
  _call: AuthorizeDeployCall;

  constructor(call: AuthorizeDeployCall) {
    this._call = call;
  }
}

export class ForbidDeployCall extends ethereum.Call {
  get inputs(): ForbidDeployCall__Inputs {
    return new ForbidDeployCall__Inputs(this);
  }

  get outputs(): ForbidDeployCall__Outputs {
    return new ForbidDeployCall__Outputs(this);
  }
}

export class ForbidDeployCall__Inputs {
  _call: ForbidDeployCall;

  constructor(call: ForbidDeployCall) {
    this._call = call;
  }

  get beneficiary(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ForbidDeployCall__Outputs {
  _call: ForbidDeployCall;

  constructor(call: ForbidDeployCall) {
    this._call = call;
  }
}

export class AssignNewParcelCall extends ethereum.Call {
  get inputs(): AssignNewParcelCall__Inputs {
    return new AssignNewParcelCall__Inputs(this);
  }

  get outputs(): AssignNewParcelCall__Outputs {
    return new AssignNewParcelCall__Outputs(this);
  }
}

export class AssignNewParcelCall__Inputs {
  _call: AssignNewParcelCall;

  constructor(call: AssignNewParcelCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AssignNewParcelCall__Outputs {
  _call: AssignNewParcelCall;

  constructor(call: AssignNewParcelCall) {
    this._call = call;
  }
}

export class AssignMultipleParcelsCall extends ethereum.Call {
  get inputs(): AssignMultipleParcelsCall__Inputs {
    return new AssignMultipleParcelsCall__Inputs(this);
  }

  get outputs(): AssignMultipleParcelsCall__Outputs {
    return new AssignMultipleParcelsCall__Outputs(this);
  }
}

export class AssignMultipleParcelsCall__Inputs {
  _call: AssignMultipleParcelsCall;

  constructor(call: AssignMultipleParcelsCall) {
    this._call = call;
  }

  get x(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get y(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AssignMultipleParcelsCall__Outputs {
  _call: AssignMultipleParcelsCall;

  constructor(call: AssignMultipleParcelsCall) {
    this._call = call;
  }
}

export class PingCall extends ethereum.Call {
  get inputs(): PingCall__Inputs {
    return new PingCall__Inputs(this);
  }

  get outputs(): PingCall__Outputs {
    return new PingCall__Outputs(this);
  }
}

export class PingCall__Inputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}

export class PingCall__Outputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}

export class SetLatestToNowCall extends ethereum.Call {
  get inputs(): SetLatestToNowCall__Inputs {
    return new SetLatestToNowCall__Inputs(this);
  }

  get outputs(): SetLatestToNowCall__Outputs {
    return new SetLatestToNowCall__Outputs(this);
  }
}

export class SetLatestToNowCall__Inputs {
  _call: SetLatestToNowCall;

  constructor(call: SetLatestToNowCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLatestToNowCall__Outputs {
  _call: SetLatestToNowCall;

  constructor(call: SetLatestToNowCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get assetId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferLandCall extends ethereum.Call {
  get inputs(): TransferLandCall__Inputs {
    return new TransferLandCall__Inputs(this);
  }

  get outputs(): TransferLandCall__Outputs {
    return new TransferLandCall__Outputs(this);
  }
}

export class TransferLandCall__Inputs {
  _call: TransferLandCall;

  constructor(call: TransferLandCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferLandCall__Outputs {
  _call: TransferLandCall;

  constructor(call: TransferLandCall) {
    this._call = call;
  }
}

export class TransferManyLandCall extends ethereum.Call {
  get inputs(): TransferManyLandCall__Inputs {
    return new TransferManyLandCall__Inputs(this);
  }

  get outputs(): TransferManyLandCall__Outputs {
    return new TransferManyLandCall__Outputs(this);
  }
}

export class TransferManyLandCall__Inputs {
  _call: TransferManyLandCall;

  constructor(call: TransferManyLandCall) {
    this._call = call;
  }

  get x(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get y(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferManyLandCall__Outputs {
  _call: TransferManyLandCall;

  constructor(call: TransferManyLandCall) {
    this._call = call;
  }
}

export class TransferLandToEstateCall extends ethereum.Call {
  get inputs(): TransferLandToEstateCall__Inputs {
    return new TransferLandToEstateCall__Inputs(this);
  }

  get outputs(): TransferLandToEstateCall__Outputs {
    return new TransferLandToEstateCall__Outputs(this);
  }
}

export class TransferLandToEstateCall__Inputs {
  _call: TransferLandToEstateCall;

  constructor(call: TransferLandToEstateCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get estateId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferLandToEstateCall__Outputs {
  _call: TransferLandToEstateCall;

  constructor(call: TransferLandToEstateCall) {
    this._call = call;
  }
}

export class TransferManyLandToEstateCall extends ethereum.Call {
  get inputs(): TransferManyLandToEstateCall__Inputs {
    return new TransferManyLandToEstateCall__Inputs(this);
  }

  get outputs(): TransferManyLandToEstateCall__Outputs {
    return new TransferManyLandToEstateCall__Outputs(this);
  }
}

export class TransferManyLandToEstateCall__Inputs {
  _call: TransferManyLandToEstateCall;

  constructor(call: TransferManyLandToEstateCall) {
    this._call = call;
  }

  get x(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get y(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get estateId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferManyLandToEstateCall__Outputs {
  _call: TransferManyLandToEstateCall;

  constructor(call: TransferManyLandToEstateCall) {
    this._call = call;
  }
}

export class SetUpdateOperatorCall extends ethereum.Call {
  get inputs(): SetUpdateOperatorCall__Inputs {
    return new SetUpdateOperatorCall__Inputs(this);
  }

  get outputs(): SetUpdateOperatorCall__Outputs {
    return new SetUpdateOperatorCall__Outputs(this);
  }
}

export class SetUpdateOperatorCall__Inputs {
  _call: SetUpdateOperatorCall;

  constructor(call: SetUpdateOperatorCall) {
    this._call = call;
  }

  get assetId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetUpdateOperatorCall__Outputs {
  _call: SetUpdateOperatorCall;

  constructor(call: SetUpdateOperatorCall) {
    this._call = call;
  }
}

export class SetUpdateManagerCall extends ethereum.Call {
  get inputs(): SetUpdateManagerCall__Inputs {
    return new SetUpdateManagerCall__Inputs(this);
  }

  get outputs(): SetUpdateManagerCall__Outputs {
    return new SetUpdateManagerCall__Outputs(this);
  }
}

export class SetUpdateManagerCall__Inputs {
  _call: SetUpdateManagerCall;

  constructor(call: SetUpdateManagerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetUpdateManagerCall__Outputs {
  _call: SetUpdateManagerCall;

  constructor(call: SetUpdateManagerCall) {
    this._call = call;
  }
}

export class SetEstateRegistryCall extends ethereum.Call {
  get inputs(): SetEstateRegistryCall__Inputs {
    return new SetEstateRegistryCall__Inputs(this);
  }

  get outputs(): SetEstateRegistryCall__Outputs {
    return new SetEstateRegistryCall__Outputs(this);
  }
}

export class SetEstateRegistryCall__Inputs {
  _call: SetEstateRegistryCall;

  constructor(call: SetEstateRegistryCall) {
    this._call = call;
  }

  get registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetEstateRegistryCall__Outputs {
  _call: SetEstateRegistryCall;

  constructor(call: SetEstateRegistryCall) {
    this._call = call;
  }
}

export class CreateEstateCall extends ethereum.Call {
  get inputs(): CreateEstateCall__Inputs {
    return new CreateEstateCall__Inputs(this);
  }

  get outputs(): CreateEstateCall__Outputs {
    return new CreateEstateCall__Outputs(this);
  }
}

export class CreateEstateCall__Inputs {
  _call: CreateEstateCall;

  constructor(call: CreateEstateCall) {
    this._call = call;
  }

  get x(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get y(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateEstateCall__Outputs {
  _call: CreateEstateCall;

  constructor(call: CreateEstateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateEstateWithMetadataCall extends ethereum.Call {
  get inputs(): CreateEstateWithMetadataCall__Inputs {
    return new CreateEstateWithMetadataCall__Inputs(this);
  }

  get outputs(): CreateEstateWithMetadataCall__Outputs {
    return new CreateEstateWithMetadataCall__Outputs(this);
  }
}

export class CreateEstateWithMetadataCall__Inputs {
  _call: CreateEstateWithMetadataCall;

  constructor(call: CreateEstateWithMetadataCall) {
    this._call = call;
  }

  get x(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get y(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get beneficiary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get metadata(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateEstateWithMetadataCall__Outputs {
  _call: CreateEstateWithMetadataCall;

  constructor(call: CreateEstateWithMetadataCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateLandDataCall extends ethereum.Call {
  get inputs(): UpdateLandDataCall__Inputs {
    return new UpdateLandDataCall__Inputs(this);
  }

  get outputs(): UpdateLandDataCall__Outputs {
    return new UpdateLandDataCall__Outputs(this);
  }
}

export class UpdateLandDataCall__Inputs {
  _call: UpdateLandDataCall;

  constructor(call: UpdateLandDataCall) {
    this._call = call;
  }

  get x(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get y(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateLandDataCall__Outputs {
  _call: UpdateLandDataCall;

  constructor(call: UpdateLandDataCall) {
    this._call = call;
  }
}

export class UpdateManyLandDataCall extends ethereum.Call {
  get inputs(): UpdateManyLandDataCall__Inputs {
    return new UpdateManyLandDataCall__Inputs(this);
  }

  get outputs(): UpdateManyLandDataCall__Outputs {
    return new UpdateManyLandDataCall__Outputs(this);
  }
}

export class UpdateManyLandDataCall__Inputs {
  _call: UpdateManyLandDataCall;

  constructor(call: UpdateManyLandDataCall) {
    this._call = call;
  }

  get x(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get y(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateManyLandDataCall__Outputs {
  _call: UpdateManyLandDataCall;

  constructor(call: UpdateManyLandDataCall) {
    this._call = call;
  }
}
