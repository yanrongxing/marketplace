// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class CreateEstate extends ethereum.Event {
  get params(): CreateEstate__Params {
    return new CreateEstate__Params(this);
  }
}

export class CreateEstate__Params {
  _event: CreateEstate;

  constructor(event: CreateEstate) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _estateId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _data(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class AddLand extends ethereum.Event {
  get params(): AddLand__Params {
    return new AddLand__Params(this);
  }
}

export class AddLand__Params {
  _event: AddLand;

  constructor(event: AddLand) {
    this._event = event;
  }

  get _estateId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveLand extends ethereum.Event {
  get params(): RemoveLand__Params {
    return new RemoveLand__Params(this);
  }
}

export class RemoveLand__Params {
  _event: RemoveLand;

  constructor(event: RemoveLand) {
    this._event = event;
  }

  get _estateId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _landId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _destinatary(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Update extends ethereum.Event {
  get params(): Update__Params {
    return new Update__Params(this);
  }
}

export class Update__Params {
  _event: Update;

  constructor(event: Update) {
    this._event = event;
  }

  get _assetId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _holder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _data(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class UpdateOperator extends ethereum.Event {
  get params(): UpdateOperator__Params {
    return new UpdateOperator__Params(this);
  }
}

export class UpdateOperator__Params {
  _event: UpdateOperator;

  constructor(event: UpdateOperator) {
    this._event = event;
  }

  get _estateId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateManager extends ethereum.Event {
  get params(): UpdateManager__Params {
    return new UpdateManager__Params(this);
  }
}

export class UpdateManager__Params {
  _event: UpdateManager;

  constructor(event: UpdateManager) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _caller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class SetLANDRegistry extends ethereum.Event {
  get params(): SetLANDRegistry__Params {
    return new SetLANDRegistry__Params(this);
  }
}

export class SetLANDRegistry__Params {
  _event: SetLANDRegistry;

  constructor(event: SetLANDRegistry) {
    this._event = event;
  }

  get _registry(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Migrated extends ethereum.Event {
  get params(): Migrated__Params {
    return new Migrated__Params(this);
  }
}

export class Migrated__Params {
  _event: Migrated;

  constructor(event: Migrated) {
    this._event = event;
  }

  get contractName(): string {
    return this._event.parameters[0].value.toString();
  }

  get migrationId(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class EstateRegistry extends ethereum.SmartContract {
  static bind(address: Address): EstateRegistry {
    return new EstateRegistry("EstateRegistry", address);
  }

  supportsInterface(_interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(_interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(_interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateManager(param0: Address, param1: Address): boolean {
    let result = super.call(
      "updateManager",
      "updateManager(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBoolean();
  }

  try_updateManager(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateManager",
      "updateManager(address,address):(bool)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  landIdEstate(param0: BigInt): BigInt {
    let result = super.call("landIdEstate", "landIdEstate(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_landIdEstate(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "landIdEstate",
      "landIdEstate(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estateLandIds(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "estateLandIds",
      "estateLandIds(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_estateLandIds(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estateLandIds",
      "estateLandIds(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(_tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenByIndex(_index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  updateOperator(param0: BigInt): Address {
    let result = super.call(
      "updateOperator",
      "updateOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_updateOperator(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "updateOperator",
      "updateOperator(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  estateLandIndex(param0: BigInt, param1: BigInt): BigInt {
    let result = super.call(
      "estateLandIndex",
      "estateLandIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_estateLandIndex(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estateLandIndex",
      "estateLandIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isMigrated(contractName: string, migrationId: string): boolean {
    let result = super.call("isMigrated", "isMigrated(string,string):(bool)", [
      ethereum.Value.fromString(contractName),
      ethereum.Value.fromString(migrationId)
    ]);

    return result[0].toBoolean();
  }

  try_isMigrated(
    contractName: string,
    migrationId: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isMigrated",
      "isMigrated(string,string):(bool)",
      [
        ethereum.Value.fromString(contractName),
        ethereum.Value.fromString(migrationId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(to: Address, metadata: string): BigInt {
    let result = super.call("mint", "mint(address,string):(uint256)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromString(metadata)
    ]);

    return result[0].toBigInt();
  }

  try_mint(to: Address, metadata: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address,string):(uint256)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromString(metadata)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLandEstateId(landId: BigInt): BigInt {
    let result = super.call(
      "getLandEstateId",
      "getLandEstateId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(landId)]
    );

    return result[0].toBigInt();
  }

  try_getLandEstateId(landId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLandEstateId",
      "getLandEstateId(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(landId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEstateSize(estateId: BigInt): BigInt {
    let result = super.call(
      "getEstateSize",
      "getEstateSize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(estateId)]
    );

    return result[0].toBigInt();
  }

  try_getEstateSize(estateId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEstateSize",
      "getEstateSize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(estateId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMetadata(estateId: BigInt): string {
    let result = super.call("getMetadata", "getMetadata(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(estateId)
    ]);

    return result[0].toString();
  }

  try_getMetadata(estateId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("getMetadata", "getMetadata(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(estateId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isUpdateAuthorized(operator: Address, estateId: BigInt): boolean {
    let result = super.call(
      "isUpdateAuthorized",
      "isUpdateAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(estateId)
      ]
    );

    return result[0].toBoolean();
  }

  try_isUpdateAuthorized(
    operator: Address,
    estateId: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isUpdateAuthorized",
      "isUpdateAuthorized(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromUnsignedBigInt(estateId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    _operator: Address,
    _from: Address,
    _tokenId: BigInt,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(_operator),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getFingerprint(estateId: BigInt): Bytes {
    let result = super.call(
      "getFingerprint",
      "getFingerprint(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(estateId)]
    );

    return result[0].toBytes();
  }

  try_getFingerprint(estateId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getFingerprint",
      "getFingerprint(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(estateId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  verifyFingerprint(estateId: BigInt, fingerprint: Bytes): boolean {
    let result = super.call(
      "verifyFingerprint",
      "verifyFingerprint(uint256,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(estateId),
        ethereum.Value.fromBytes(fingerprint)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyFingerprint(
    estateId: BigInt,
    fingerprint: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyFingerprint",
      "verifyFingerprint(uint256,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(estateId),
        ethereum.Value.fromBytes(fingerprint)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get metadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferLandCall extends ethereum.Call {
  get inputs(): TransferLandCall__Inputs {
    return new TransferLandCall__Inputs(this);
  }

  get outputs(): TransferLandCall__Outputs {
    return new TransferLandCall__Outputs(this);
  }
}

export class TransferLandCall__Inputs {
  _call: TransferLandCall;

  constructor(call: TransferLandCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get destinatary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferLandCall__Outputs {
  _call: TransferLandCall;

  constructor(call: TransferLandCall) {
    this._call = call;
  }
}

export class TransferManyLandsCall extends ethereum.Call {
  get inputs(): TransferManyLandsCall__Inputs {
    return new TransferManyLandsCall__Inputs(this);
  }

  get outputs(): TransferManyLandsCall__Outputs {
    return new TransferManyLandsCall__Outputs(this);
  }
}

export class TransferManyLandsCall__Inputs {
  _call: TransferManyLandsCall;

  constructor(call: TransferManyLandsCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get landIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get destinatary(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferManyLandsCall__Outputs {
  _call: TransferManyLandsCall;

  constructor(call: TransferManyLandsCall) {
    this._call = call;
  }
}

export class SetLANDRegistryCall extends ethereum.Call {
  get inputs(): SetLANDRegistryCall__Inputs {
    return new SetLANDRegistryCall__Inputs(this);
  }

  get outputs(): SetLANDRegistryCall__Outputs {
    return new SetLANDRegistryCall__Outputs(this);
  }
}

export class SetLANDRegistryCall__Inputs {
  _call: SetLANDRegistryCall;

  constructor(call: SetLANDRegistryCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLANDRegistryCall__Outputs {
  _call: SetLANDRegistryCall;

  constructor(call: SetLANDRegistryCall) {
    this._call = call;
  }
}

export class PingCall extends ethereum.Call {
  get inputs(): PingCall__Inputs {
    return new PingCall__Inputs(this);
  }

  get outputs(): PingCall__Outputs {
    return new PingCall__Outputs(this);
  }
}

export class PingCall__Inputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}

export class PingCall__Outputs {
  _call: PingCall;

  constructor(call: PingCall) {
    this._call = call;
  }
}

export class UpdateMetadataCall extends ethereum.Call {
  get inputs(): UpdateMetadataCall__Inputs {
    return new UpdateMetadataCall__Inputs(this);
  }

  get outputs(): UpdateMetadataCall__Outputs {
    return new UpdateMetadataCall__Outputs(this);
  }
}

export class UpdateMetadataCall__Inputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get metadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateMetadataCall__Outputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }
}

export class SetUpdateManagerCall extends ethereum.Call {
  get inputs(): SetUpdateManagerCall__Inputs {
    return new SetUpdateManagerCall__Inputs(this);
  }

  get outputs(): SetUpdateManagerCall__Outputs {
    return new SetUpdateManagerCall__Outputs(this);
  }
}

export class SetUpdateManagerCall__Inputs {
  _call: SetUpdateManagerCall;

  constructor(call: SetUpdateManagerCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class SetUpdateManagerCall__Outputs {
  _call: SetUpdateManagerCall;

  constructor(call: SetUpdateManagerCall) {
    this._call = call;
  }
}

export class SetUpdateOperatorCall extends ethereum.Call {
  get inputs(): SetUpdateOperatorCall__Inputs {
    return new SetUpdateOperatorCall__Inputs(this);
  }

  get outputs(): SetUpdateOperatorCall__Outputs {
    return new SetUpdateOperatorCall__Outputs(this);
  }
}

export class SetUpdateOperatorCall__Inputs {
  _call: SetUpdateOperatorCall;

  constructor(call: SetUpdateOperatorCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetUpdateOperatorCall__Outputs {
  _call: SetUpdateOperatorCall;

  constructor(call: SetUpdateOperatorCall) {
    this._call = call;
  }
}

export class SetLandUpdateOperatorCall extends ethereum.Call {
  get inputs(): SetLandUpdateOperatorCall__Inputs {
    return new SetLandUpdateOperatorCall__Inputs(this);
  }

  get outputs(): SetLandUpdateOperatorCall__Outputs {
    return new SetLandUpdateOperatorCall__Outputs(this);
  }
}

export class SetLandUpdateOperatorCall__Inputs {
  _call: SetLandUpdateOperatorCall;

  constructor(call: SetLandUpdateOperatorCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get operator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetLandUpdateOperatorCall__Outputs {
  _call: SetLandUpdateOperatorCall;

  constructor(call: SetLandUpdateOperatorCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class Initialize1Call extends ethereum.Call {
  get inputs(): Initialize1Call__Inputs {
    return new Initialize1Call__Inputs(this);
  }

  get outputs(): Initialize1Call__Outputs {
    return new Initialize1Call__Outputs(this);
  }
}

export class Initialize1Call__Inputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class Initialize1Call__Outputs {
  _call: Initialize1Call;

  constructor(call: Initialize1Call) {
    this._call = call;
  }
}

export class Initialize2Call extends ethereum.Call {
  get inputs(): Initialize2Call__Inputs {
    return new Initialize2Call__Inputs(this);
  }

  get outputs(): Initialize2Call__Outputs {
    return new Initialize2Call__Outputs(this);
  }
}

export class Initialize2Call__Inputs {
  _call: Initialize2Call;

  constructor(call: Initialize2Call) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class Initialize2Call__Outputs {
  _call: Initialize2Call;

  constructor(call: Initialize2Call) {
    this._call = call;
  }
}

export class Initialize3Call extends ethereum.Call {
  get inputs(): Initialize3Call__Inputs {
    return new Initialize3Call__Inputs(this);
  }

  get outputs(): Initialize3Call__Outputs {
    return new Initialize3Call__Outputs(this);
  }
}

export class Initialize3Call__Inputs {
  _call: Initialize3Call;

  constructor(call: Initialize3Call) {
    this._call = call;
  }

  get _sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class Initialize3Call__Outputs {
  _call: Initialize3Call;

  constructor(call: Initialize3Call) {
    this._call = call;
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SafeTransferManyFromCall extends ethereum.Call {
  get inputs(): SafeTransferManyFromCall__Inputs {
    return new SafeTransferManyFromCall__Inputs(this);
  }

  get outputs(): SafeTransferManyFromCall__Outputs {
    return new SafeTransferManyFromCall__Outputs(this);
  }
}

export class SafeTransferManyFromCall__Inputs {
  _call: SafeTransferManyFromCall;

  constructor(call: SafeTransferManyFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get estateIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class SafeTransferManyFromCall__Outputs {
  _call: SafeTransferManyFromCall;

  constructor(call: SafeTransferManyFromCall) {
    this._call = call;
  }
}

export class SafeTransferManyFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferManyFrom1Call__Inputs {
    return new SafeTransferManyFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferManyFrom1Call__Outputs {
    return new SafeTransferManyFrom1Call__Outputs(this);
  }
}

export class SafeTransferManyFrom1Call__Inputs {
  _call: SafeTransferManyFrom1Call;

  constructor(call: SafeTransferManyFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get estateIds(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferManyFrom1Call__Outputs {
  _call: SafeTransferManyFrom1Call;

  constructor(call: SafeTransferManyFrom1Call) {
    this._call = call;
  }
}

export class UpdateLandDataCall extends ethereum.Call {
  get inputs(): UpdateLandDataCall__Inputs {
    return new UpdateLandDataCall__Inputs(this);
  }

  get outputs(): UpdateLandDataCall__Outputs {
    return new UpdateLandDataCall__Outputs(this);
  }
}

export class UpdateLandDataCall__Inputs {
  _call: UpdateLandDataCall;

  constructor(call: UpdateLandDataCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get landId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateLandDataCall__Outputs {
  _call: UpdateLandDataCall;

  constructor(call: UpdateLandDataCall) {
    this._call = call;
  }
}

export class UpdateManyLandDataCall extends ethereum.Call {
  get inputs(): UpdateManyLandDataCall__Inputs {
    return new UpdateManyLandDataCall__Inputs(this);
  }

  get outputs(): UpdateManyLandDataCall__Outputs {
    return new UpdateManyLandDataCall__Outputs(this);
  }
}

export class UpdateManyLandDataCall__Inputs {
  _call: UpdateManyLandDataCall;

  constructor(call: UpdateManyLandDataCall) {
    this._call = call;
  }

  get estateId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get landIds(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get data(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateManyLandDataCall__Outputs {
  _call: UpdateManyLandDataCall;

  constructor(call: UpdateManyLandDataCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
